@inherits LayoutComponentBase

<TopAppBar
    KeepState
    AboveAppDrawer
    Variant="TopAppBar.Variants.Fixed"
    Color="white"
    DarkModeColor="#00bef2"
    @bind-BackgroundMode="BackgroundMode"
    BackgroundColor="rgb(5, 39, 103)">
    <TopAppBarHeader
        Title="Mobsites" 
        Image="mobsites-logo.png"
        UseImage>
        <Icon Variant="menu" Style="padding-left: 5px;padding-right: 12px;cursor: pointer;" />
    </TopAppBarHeader>
    <TopAppBarActions ShowActionsAlways>
        <a href="https://github.com/Mobsites" target="_blank" class="ml-md-auto pr-2"><img src="@(BackgroundMode == BackgroundModes.Light ? "light-mode-" : string.Empty)github.png" width="24" height="24" /></a>
        <a href="https://github.com/allan-mobley-jr" target="_blank" class="pr-2"><img src="me.png" width="24" height="24" /></a>
    </TopAppBarActions>
</TopAppBar>
<AppDrawer
    KeepState
    Color="white"
    DarkModeColor="#00bef2"
    @bind-BackgroundMode="BackgroundMode"
    BackgroundImage="app-drawer-bg.jpg">
    <AppDrawerContent>
        <AppDrawerHeader Image="mobsites-logo.png" UseImage />
        <AppDrawerContentList>
            <AppDrawerContentDivider OverrideParentColors />
            <AppDrawerContentListAction Href="/" tabindex="0">
                <Icon Variant="home" Text="Home" Spacing="10" Style="padding-left: 15px;" />
            </AppDrawerContentListAction>
            <AppDrawerContentSubheader OverrideParentColors>Theme</AppDrawerContentSubheader>
            <AppDrawerContentListAction @onclick="@((e) => ToggleTheme())">
                <Icon Variant="invert_colors" Text="@themeText" Spacing="10" Style="padding-left: 15px;" />
            </AppDrawerContentListAction>
            <AppDrawerContentDivider OverrideParentColors />
            <AppDrawerContentSubheader OverrideParentColors>Blazor Components</AppDrawerContentSubheader>
            <AppDrawerContentListAction Href="/blazor-app-drawer">
                <Icon Variant="menu_open" Text="App Drawer" Spacing="10" Style="padding-left: 15px;" />
            </AppDrawerContentListAction>
            <AppDrawerContentListAction Href="/blazor-icon">
                <Icon Variant="info" Text="Icon" Spacing="10" Style="padding-left: 15px;" />
            </AppDrawerContentListAction>
            <AppDrawerContentListAction Href="/blazor-signature-pad">
                <Icon Variant="edit" Text="Signature Pad" Spacing="10" Style="padding-left: 15px;" />
            </AppDrawerContentListAction>
            <AppDrawerContentListAction Href="/blazor-top-app-bar">
                <Icon Variant="line_weight" Text="Top App Bar" Spacing="10" Style="padding-left: 15px;" />
            </AppDrawerContentListAction>
        </AppDrawerContentList>
    </AppDrawerContent>
</AppDrawer>

<AppContent 
    BackgroundMode="BackgroundMode" 
    DarkModeBackgroundColor="black"
    DarkModeColor="#00bef2"
    LightModeBackgroundColor="white">
    <main>
        @Body
    </main>
</AppContent>

@code {
    private string themeText = "Default";
    private BackgroundModes backgroundMode = BackgroundModes.Image;
    public BackgroundModes BackgroundMode
    {
        get => backgroundMode;
        set
        {
            backgroundMode = value;

            switch (BackgroundMode)
            {
                case BackgroundModes.Dark: 
                    themeText = "Dark";
                    break;
                case BackgroundModes.Light:
                    themeText = "Light";
                    break;
                case BackgroundModes.Image:
                default:
                    themeText = "Default";
                    break;
            }
        }
    }

    void ToggleTheme()
    {
        switch (BackgroundMode)
        {
            case BackgroundModes.Image: 
                BackgroundMode = BackgroundModes.Dark;
                break;
            case BackgroundModes.Dark:
                BackgroundMode = BackgroundModes.Light;
                break;
            case BackgroundModes.Light:
            default:
                BackgroundMode = BackgroundModes.Image;
                break;
        }
    }

    enum Themes
    {
        Normal,
        Dark,
        Light
    }
}