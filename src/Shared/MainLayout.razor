@inherits LayoutComponentBase

<TopAppBar
    KeepState
    Id=""
    AboveAppDrawer
    Variant="TopAppBar.Variants.Fixed"
    Color="white"
    DarkModeColor="#00bef2"
    @bind-BackgroundMode="BackgroundMode"
    BackgroundColor="rgb(5, 39, 103)">
    <TopAppBarHeader>
        <TopAppBarHeaderNavTrigger>
            <Icon Variant="menu" Style="padding-left: 5px;padding-right: 12px;cursor: pointer;" />
        </TopAppBarHeaderNavTrigger>
        <TopAppBarHeaderLogo Src="mobsites-logo.png" Style="padding-top: 10px;" />
        <TopAppBarHeaderTitle>Mobsites</TopAppBarHeaderTitle>
    </TopAppBarHeader>
    <TopAppBarActions ShowActionsAlways>
        <a href="https://github.com/Mobsites" target="_blank" style="margin-right: 10px;">
            <Icon Image="light-github.png" DarkModeImage="light-github.png" LightModeImage="dark-github.png" />
        </a>
        <a href="https://github.com/allan-mobley-jr" target="_blank" style="margin-right: 10px;">
            <Icon Image="me.png" />
        </a>
        <a href="https://twitter.com/allan_mobley_jr" target="_blank" style="margin-right: 5px;">
            <Icon Image="twitter.png" />
        </a>
    </TopAppBarActions>
</TopAppBar>
<AppDrawer
    KeepState
    Class="@TopAppBar.AdjustmentMarkerClass"
    Id=""
    Color="white"
    DarkModeColor="#00bef2"
    @bind-BackgroundMode="BackgroundMode"
    BackgroundImage="app-drawer-bg.jpg">
    <AppDrawerContent>
        <AppDrawerHeader>
            <AppDrawerHeaderLogo Src="mobsites-logo.png" />
        </AppDrawerHeader>
        <AppDrawerContentDivider OverrideParentColors />
        <AppDrawerContentAction Href="/">
            <Icon Variant="home" Text="Home" Spacing="20" Style="padding-left: 15px;" />
        </AppDrawerContentAction>

        <AppDrawerContentSubheader OverrideParentColors>Theme</AppDrawerContentSubheader>
        <AppDrawerContentAction @onclick="@((e) => ToggleTheme())">
            <Icon Variant="invert_colors" Text="@themeText" Spacing="20" Style="padding-left: 15px;" />
        </AppDrawerContentAction>

        <AppDrawerContentDivider OverrideParentColors />
        <AppDrawerContentSubheader OverrideParentColors>Blazor Components</AppDrawerContentSubheader>
        <AppDrawerContentAction Href="/blazor/app-drawer">
            <Icon Variant="menu_open" Text="App Drawer" Spacing="20" Style="padding-left: 15px;" />
        </AppDrawerContentAction>
        <AppDrawerContentAction Href="/blazor/icon">
            <Icon Variant="info" Text="Icon" Spacing="20" Style="padding-left: 15px;" />
        </AppDrawerContentAction>
        <AppDrawerContentAction Href="/blazor/signature-pad">
            <Icon Variant="edit" Text="Signature Pad" Spacing="20" Style="padding-left: 15px;" />
        </AppDrawerContentAction>
        <AppDrawerContentAction Href="/blazor/top-app-bar">
            <Icon Variant="line_weight" Text="Top App Bar" Spacing="20" Style="padding-left: 15px;" />
        </AppDrawerContentAction>

        <AppDrawerContentDivider OverrideParentColors />
        <AppDrawerContentSubheader OverrideParentColors>Common Attributes</AppDrawerContentSubheader>
        <AppDrawerContentAction Href="/blazor/themes">
            <Icon Variant="palette" Text="Themes" Spacing="20" Style="padding-left: 15px;" />
        </AppDrawerContentAction>
        <AppDrawerContentAction Href="/blazor/keeping-state">
            <Icon Variant="cached" Text="Keeping State" Spacing="20" Style="padding-left: 15px;" />
        </AppDrawerContentAction>
    </AppDrawerContent>
</AppDrawer>

@{
    string css = $"{TopAppBar.AdjustmentMarkerClass} {AppDrawer.MainContentMarker}";
}
<AppContent 
    Class="@css"
    BackgroundMode="BackgroundMode" 
    DarkModeBackgroundColor="black"
    DarkModeColor="#00bef2"
    LightModeBackgroundColor="white">
    <main>
        <CascadingValue Value="this">
            @Body
        </CascadingValue>
    </main>
</AppContent>

@code {
    private string themeText = "Dark";
    private BackgroundModes backgroundMode = BackgroundModes.Dark;
    public BackgroundModes BackgroundMode
    {
        get => backgroundMode;
        set
        {
            backgroundMode = value;
            themeText = backgroundMode.ToString();
        }
    }

    public void ToggleContrastMode()
    {
        switch (BackgroundMode)
        {
            case BackgroundModes.Dark:
                BackgroundMode = BackgroundModes.Light;
                break;
            case BackgroundModes.Light:
            default:
                BackgroundMode = BackgroundModes.Dark;
                break;
        }

        StateHasChanged();
    }

    public void ToggleTheme()
    {
        switch (BackgroundMode)
        {
            case BackgroundModes.Image: 
                BackgroundMode = BackgroundModes.Dark;
                break;
            case BackgroundModes.Dark:
                BackgroundMode = BackgroundModes.Light;
                break;
            case BackgroundModes.Light:
            default:
                BackgroundMode = BackgroundModes.Image;
                break;
        }

        StateHasChanged();
    }

    enum Themes
    {
        Normal,
        Dark,
        Light
    }
}